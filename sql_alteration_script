ALTER TABLE orders_table
	ALTER COLUMN date_uuid TYPE UUID USING CAST(date_uuid AS UUID),
	ALTER COLUMN user_uuid TYPE UUID USING CASt(user_uuid AS UUID),
	ALTER COLUMN card_number TYPE VARCHAR(20),
	ALTER COLUMN store_code TYPE VARCHAR(12),
	ALTER COLUMN product_code TYPE VARCHAR(11),
	ALTER COLUMN product_quantity TYPE SMALLINT;
	
ALTER TABLE dim_users
	ALTER COLUMN first_name TYPE VARCHAR(255),
	ALTER COLUMN last_name TYPE VARCHAR(255),
	ALTER COLUMN date_of_birth TYPE DATE USING CAST(date_of_birth AS DATE),
	ALTER COLUMN country_code TYPE VARCHAR(2),
	ALTER COLUMN user_uuid TYPE UUID USING CAST(user_uuid AS UUID),
	ALTER COLUMN join_date TYPE DATE USING CAST(join_date AS DATE);

UPDATE dim_store_details
SET longitude = NULL
WHERE longitude = 'N/A';

ALTER TABLE dim_store_details
	ALTER COLUMN address TYPE VARCHAR(255),
	ALTER COLUMN longitude TYPE FLOAT USING CAST(longitude AS DOUBLE PRECISION),
	ALTER COLUMN locality TYPE VARCHAR(255),
	ALTER COLUMN store_code TYPE VARCHAR(13),
	ALTER COLUMN staff_numbers TYPE SMALLINT USING CAST(staff_numbers AS SMALLINT),
	ALTER COLUMN opening_date TYPE DATE USING CAST(opening_date AS DATE),
	ALTER COLUMN store_type TYPE VARCHAR(255),
	ALTER COLUMN store_type DROP NOT NULL,
	ALTER COLUMN latitude TYPE FLOAT USING CAST(latitude AS DOUBLE PRECISION),
	ALTER COLUMN country_code TYPE VARCHAR(2),
	ALTER COLUMN continent TYPE VARCHAR(255);

ALTER TABLE dim_store_details
	DROP COLUMN lat;
	
ALTER TABLE dim_products
	RENAME COLUMN removed TO still_available;

UPDATE dim_products
	SET product_price = REPLACE(product_price, 'Â£', '');

UPDATE dim_products
	SET still_available = 
		CASE 
			WHEN still_available = 'Still_available' THEN TRUE
			WHEN still_available = 'Removed' THEN FALSE
			ELSE NULL
		END;

ALTER TABLE dim_products
	ADD COLUMN weight_class VARCHAR(14),
	ALTER COLUMN product_price TYPE FLOAT USING CAST(product_price AS DOUBLE PRECISION),
	ALTER COLUMN weight TYPE FLOAT USING CAST(weight AS DOUBLE PRECISION),
	ALTER COLUMN "EAN" TYPE VARCHAR(255),
	ALTER COLUMN product_code TYPE VARCHAR(11),
	ALTER COLUMN date_added TYPE date USING CAST(date_added AS DATE),
	ALTER COLUMN uuid TYPE UUID USING CAST(uuid AS UUID),
	ALTER COLUMN still_available TYPE BOOL USING CAST(still_available AS BOOL);

UPDATE dim_products
	SET weight_class =
	CASE
		WHEN weight < 2 THEN 'Light'
		WHEN weight >= 2 AND weight < 40 THEN 'Mid_Sized'
		WHEN weight >= 40 AND weight < 140 THEN 'Heavy'
		ELSE 'Truck_Required'
	END;

ALTER TABLE dim_date_times
	ALTER COLUMN month TYPE VARCHAR(2),
	ALTER COLUMN year TYPE VARCHAR(4),
	ALTER COLUMN day TYPE VARCHAR(2),
	ALTER COLUMN time_period TYPE VARCHAR(10),
	ALTER COLUMN date_uuid TYPE UUID USING CAST(date_uuid AS UUID);

ALTER TABLE dim_card_details
	ALTER COLUMN card_number TYPE VARCHAR(20),
	ALTER COLUMN expiry_date TYPE VARCHAR(5),
	ALTER COLUMN date_payment_confirmed TYPE DATE USING CAST(date_payment_confirmed AS DATE);

ALTER TABLE dim_users
	ADD PRIMARY KEY (user_uuid);
ALTER TABLE dim_store_details
	ADD PRIMARY KEY (store_code);
ALTER TABLE dim_products
	ADD PRIMARY KEY (product_code);
ALTER TABLE dim_date_times
	ADD PRIMARY KEY (date_uuid);
ALTER TABLE dim_card_details
	ADD PRIMARY KEY (card_number);
ALTER TABLE orders_table
	ADD FOREIGN KEY (user_uuid)
	REFERENCES dim_users(user_uuid),
	ADD FOREIGN KEY (store_code)
	REFERENCES dim_store_details(store_code),
	ADD FOREIGN KEY (product_code)
	REFERENCES dim_products(product_code),
	ADD FOREIGN KEY (date_uuid)
	REFERENCES dim_date_times(date_uuid),
	ADD FOREIGN KEY (card_number)
	REFERENCES dim_card_details(card_number);
